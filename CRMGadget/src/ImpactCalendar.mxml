<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	width="100%" height="100%"
	verticalScrollPolicy="off"
	
	initialize="init()"
	>
	<mx:Script>
		<![CDATA[
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import gadget.control.ButtonAddRenderer;
			import gadget.control.CalculateColRender;
			import gadget.control.CalculateGridTotalRender;
			import gadget.control.CloseableToolTip;
			import gadget.control.ComboboxColRender;
			import gadget.control.DateColumnRenderer;
			import gadget.control.ImpactText;
			import gadget.control.ItemFinderColRender;
			import gadget.control.LabelColRenderer;
			import gadget.control.LinkButtonColRenderer;
			import gadget.control.LinkButtonRevenueColRenderer;
			import gadget.control.QTextRenderer;
			import gadget.control.SubTableRenderer;
			import gadget.dao.DAOUtils;
			import gadget.dao.Database;
			import gadget.lists.List;
			import gadget.service.PicklistService;
			import gadget.util.DateUtils;
			import gadget.util.GUIUtils;
			import gadget.util.ImageUtils;
			import gadget.util.Relation;
			import gadget.util.SalesStageUtils;
			import gadget.util.StringUtils;
			import gadget.util.Utils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.AdvancedDataGrid;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.core.UIComponent;
			
			import spark.components.supportClasses.ItemRenderer;
 			private var _list:List;
			[Embed(source='/assets/search.png')] [Bindable] public static var searchIcon:Class;
			[Embed(source='/assets/cancel.png')] [Bindable] public var closeIcon:Class;
			[Embed(source='/assets/save.gif')] [Bindable] public var saveIcon:Class;
			[Bindable] public var rows:ArrayCollection;
			[Bindable] public var filter:Object;
			private var opp_columns:ArrayCollection = new ArrayCollection([
				{element_name:"OwnerFullName"},
				{element_name:"OpportunityType"},
				{element_name:"OpportunityName"},
				{element_name:"CustomPickList0"},
				{element_name:"SalesStage"},
				{element_name:"Probability"},
				{element_name:"CloseDate"},
				{element_name:"ModifiedDate"},
				{element_name:"gadget_id"},
				{element_name:"OpportunityId"},
				{element_name:"CustomText0"},
				{element_name:"CustomText1"},
				{element_name:"CustomText2"},
				{element_name:"CustomText3"},
				{element_name:"CustomText4"},
				{element_name:"CustomText5"},
				{element_name:"CustomText6"},
				{element_name:"CustomText7"},
				{element_name:"CustomText8"},
				{element_name:"CustomText9"},
				{element_name:"CustomText10"},
				{element_name:"CustomText11"},
				{element_name:"CustomText12"},
				{element_name:"CustomText13"},
				{element_name:"CustomText14"},
				{element_name:"CustomText15"},
				{element_name:"CustomText16"},
				{element_name:"CustomText17"},
				{element_name:"CustomText18"},
				{element_name:"CustomText19"},
				{element_name:"CustomText20"},
				{element_name:"CustomText21"},
				{element_name:"CustomText22"},
				{element_name:"CustomText23"},
				{element_name:"local_update"},
				{element_name:"deleted"},
				{element_name:"sync_number"},
				{element_name:"ood_lastmodified"},
				{element_name:"AccountName"}
				
				
			]);
			
			
			private static var mapFields:Object ={Oct:"CustomText0",Nov:"CustomText1",Dec:"CustomText2",Jan:"CustomText3",Feb:"CustomText4",Mar:"CustomText5",Apr:"CustomText6",May:"CustomText7",Jun:"CustomText8",Jul:"CustomText9",Aug:"CustomText10",Sep:"CustomText11",
				OctNext:"CustomText12",NovNext:"CustomText13",DecNext:"CustomText14",JanNext:"CustomText15",FebNext:"CustomText16",MarNext:"CustomText17",AprNext:"CustomText18",MayNext:"CustomText19",JunNext:"CustomText20",JulNext:"CustomText21",AugNext:"CustomText22",SepNext:"CustomText23"};

			private static var calMonth:ArrayCollection =new ArrayCollection(["CustomText0","CustomText1","CustomText2","CustomText3","CustomText4","CustomText5","CustomText6","CustomText7","CustomText8","CustomText9","CustomText10","CustomText11"]);
			
			[Bindable]
			public function get list():List
			{
				return _list;
			}

			public function set list(value:List):void
			{
				_list = value;
			}

			public function init():void{
				initGridListAllOpportunities();
				initGridTotalAllOpportunities();
				initGridProductDetails();
			}
			private  function createColumn(header:String,dataField:String,editAble:Boolean=false,renderer:ClassFactory=null):AdvancedDataGridColumn{
				
				
				var col:AdvancedDataGridColumn = new AdvancedDataGridColumn();
				col.dataField = dataField;
				col.headerText = header;
				col.editable = editAble;
				if(renderer !=null){
//					col.itemRenderer = renderer;
					col.itemEditor = renderer;
				}
				
				return col;
			}
			
			private  function displayDataTime(item:Object,col:AdvancedDataGridColumn):String{
				

				var fieldValue:String = item[col.dataField];	
				if(!StringUtils.isEmpty(fieldValue)){
					var date:Date = DateUtils.guessAndParse(fieldValue);
					if(date!=null){
						var currentUserDatePattern:Object = DateUtils.getCurrentUserDatePattern();
						/*
						if(!isDateTime){
							return DateUtils.format(date, currentUserDatePattern.dateFormat);
						}else{
							date = new Date(date.getTime()+DateUtils.getCurrentTimeZone(date)*GUIUtils.millisecondsPerHour);
							var format:String = currentUserDatePattern.dateFormat + ' ' + currentUserDatePattern.timeFormat ;
							return DateUtils.format(date, format);
						}
						*/
						return DateUtils.format(date, currentUserDatePattern.dateFormat);
						
					}
				}
				return "";
			}
			private function createEmptyObject():Object{
				var obj:Object = new Object();
				obj.isNew=true;
				return obj;
			}
			private function addEmptyRow(setSelected:Boolean = false,fromclick:Boolean = false,colIdx:int=0):void{
				if(rows!=null){
					var lastRow:Object = rows.getItemAt(rows.length-1);
					if(lastRow.isNew){//
						return;
					}
				}
				
				if(gridListAll.editedItemPosition){
					
					var oldColIndex:int = gridListAll.editedItemPosition.columnIndex;
					var editColumn:AdvancedDataGridColumn = gridListAll.columns[oldColIndex];
					var oldRowIndex:int = gridListAll.editedItemPosition.rowIndex;
					if((rows.length-1== oldRowIndex+1 || rows.length==oldRowIndex+1) ){//add empty row
						
						//						var lastRow:Object = rows.getItemAt(rows.length-1);
						//						if(lastRow.isNew){
						//							return;
						//						}
						
						var newObj:Object = createEmptyObject();
						if(rows==null){
							rows = new ArrayCollection();
						}
						
						rows.addItem(newObj); //add a blank record		
						
						gridListAll.dataProvider = rows;
						//						editableGrid.validateNow();
						if(setSelected){
							
							gridListAll.editedItemPosition = {columnIndex:0, rowIndex:(oldRowIndex+1)};
						}else{
							gridListAll.editedItemPosition = {columnIndex:oldColIndex, rowIndex:oldRowIndex};
						}
						
					}
				}else if(fromclick){
					var selectedRow:int = gridListAll.selectedIndex;
					if(rows.length-1==selectedRow){
						
						if(rows==null){
							rows = new ArrayCollection();
						}
						
						
						if(colIdx>=0 && colIdx<gridListAll.columnCount){
							var col:AdvancedDataGridColumn = gridListAll.columns[colIdx];
							if(col.editable){
								rows.addItem(createEmptyObject()); //add a blank record						
								gridListAll.dataProvider = rows;	
								gridListAll.editedItemPosition = {columnIndex:colIdx, rowIndex:selectedRow};
							}
						}
					}
				}
			}
			private function displayPicklistValue(item:Object,col:AdvancedDataGridColumn):String{
				return List.displayPicklistValue(item,col,Database.opportunityDao.entity);
			}
			private function labelRMFunction(item:Object,col:AdvancedDataGridColumn):String{
				if(item.isTotal){
					return "";
				}else if(item.isNew){		
					return "Enter New Opportunity";
				}else{
					return Database.allUsersDao.ownerUser().ManagerFullName;
				}
				
			}
			
			private var currentTip:CloseableToolTip = null;
			private function createTip(textInput:TextInput, text:String):void {

				if(list.boxImpactCalendar.visible && textInput != null){
					currentTip = new CloseableToolTip(systemManager);
					currentTip.text = text;
					systemManager.toolTipChildren.addChild(UIComponent(currentTip));
					currentTip.setActualSize(currentTip.getExplicitOrMeasuredWidth(), currentTip.getExplicitOrMeasuredHeight());
					currentTip.move(textInput.x + 10 , textInput.y + 20);
				}
				
			}
			
			private var all_columns:ArrayCollection = new ArrayCollection([
					{element_name:"OwnerFullName",display_name:"TM Name",itemRenderer:null,properties:null},
					{element_name:"OpportunityName",display_name:"Opportunity Name",itemRenderer:new ClassFactory(LinkButtonRevenueColRenderer),properties:{"list":list},editAble:true},
					{element_name:"AccountName",display_name:"Account Name",itemEditor:new ClassFactory(ItemFinderColRender),properties:{'entity':Database.opportunityDao.entity},editAble:true,width:120,editorDataField :"selectedItem"},
					{element_name:"SalesStage",display_name:"Sales Stage",itemEditor:new ClassFactory(ComboboxColRender),properties:{'entity':Database.opportunityDao.entity},editAble:true,editorDataField :"selectedItem"},
					{element_name:"Probability",display_name:"Probability %",itemEditor:null,properties:null,editAble:true},
					{element_name:"CloseDate",display_name:"Close Date",itemEditor:new ClassFactory(DateColumnRenderer),properties:null,labelFunction:displayDataTime,editAble:true,editorDataField:"selectedDate"},
					{element_name:"OriginalCloseDate",display_name:"Original close date",itemEditor:new ClassFactory(DateColumnRenderer),properties:null,labelFunction : displayDataTime,editAble:true,editorDataField:"selectedDate"},
					{element_name:"CustomPickList0",display_name:"Business Area",itemEditor:new ClassFactory(ComboboxColRender),properties:{'entity':Database.opportunityDao.entity},labelFunction:displayPicklistValue,editAble:true,editorDataField :"selectedItem"},
					{element_name:"Curvetype",display_name:"Curve type",itemEditor:null,properties:null},
					{element_name:"Membership",display_name:"Membership",itemEditor:null,properties:null},
					{element_name:"TradingPartner ",display_name:"Trading partner ",itemEditor:null,properties:null},
					{element_name:"StartDate",display_name:"Start Date",itemEditor:new ClassFactory(DateColumnRenderer),properties:null,editAble:true,editorDataField:"selectedDate"},
					{element_name:"EndDate",display_name:"End Date",itemEditor:new ClassFactory(DateColumnRenderer),properties:null,editAble:true,editorDataField:"selectedDate"},
					{element_name:"CustomPickList31",display_name:"Category",properties:null},
					{element_name:"CustomPickList34",display_name:"Unit",properties:null},
					{element_name:"CustomNumber0",display_name:"Quantity",properties:null},
					{element_name:"CustomCurrency4",display_name:"Value",properties:null},
					{element_name:"AnnualizedImpact",display_name:"Annualized impact"},
					{element_name:"Q1",display_name:"Q1",itemEditor:new ClassFactory(QTextRenderer),properties:{focusOutHandler:itemEditEndListener,dataField:"Q1",columns:new ArrayCollection([mapFields["Oct"],mapFields["Nov"],mapFields["Dec"]])},editAble:true},
					{element_name:"Q2",display_name:"Q2",itemEditor:new ClassFactory(QTextRenderer),properties:{focusOutHandler:itemEditEndListener,columns:new ArrayCollection([mapFields["Jan"],mapFields["Feb"],mapFields["Mar"]])},editAble:true},
					{element_name:"Q3",display_name:"Q3",itemEditor:new ClassFactory(QTextRenderer),properties:{focusOutHandler:itemEditEndListener,columns:new ArrayCollection([mapFields["Apr"],mapFields["May"],mapFields["Jun"]])},editAble:true},
					{element_name:"Q4",display_name:"Q4",itemEditor:new ClassFactory(QTextRenderer),properties:{focusOutHandler:itemEditEndListener,columns:new ArrayCollection([mapFields["Jul"],mapFields["Aug"],mapFields["Sep"]])},editAble:true},
					{element_name:mapFields["Oct"],display_name:"Oct",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q1",columns:new ArrayCollection([mapFields["Oct"],mapFields["Nov"],mapFields["Dec"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Nov"],display_name:"Nov",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q1",columns:new ArrayCollection([mapFields["Oct"],mapFields["Nov"],mapFields["Dec"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Dec"],display_name:"Dec",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q1",columns:new ArrayCollection([mapFields["Oct"],mapFields["Nov"],mapFields["Dec"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Jan"],display_name:"Jan",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q2",columns:new ArrayCollection([mapFields["Jan"],mapFields["Feb"],mapFields["Mar"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Feb"],display_name:"Feb",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q2",columns:new ArrayCollection([mapFields["Jan"],mapFields["Feb"],mapFields["Mar"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Mar"],display_name:"Mar",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q2",columns:new ArrayCollection([mapFields["Jan"],mapFields["Feb"],mapFields["Mar"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Apr"],display_name:"Apr",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q3",columns:new ArrayCollection([mapFields["Apr"],mapFields["May"],mapFields["Jun"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["May"],display_name:"May",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q3",columns:new ArrayCollection([mapFields["Apr"],mapFields["May"],mapFields["Jun"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Jun"],display_name:"Jun",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q3",columns:new ArrayCollection([mapFields["Apr"],mapFields["May"],mapFields["Jun"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Jul"],display_name:"Jul",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q4",columns:new ArrayCollection([mapFields["Jul"],mapFields["Aug"],mapFields["Sep"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Aug"],display_name:"Aug",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q4",columns:new ArrayCollection([mapFields["Jul"],mapFields["Aug"],mapFields["Sep"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:mapFields["Sep"],display_name:"Sep",itemEditor:new ClassFactory(ImpactText),properties:{focusOutHandler:itemEditEndListener,columnTarget:"Q4",columns:new ArrayCollection([mapFields["Jul"],mapFields["Aug"],mapFields["Sep"]]),restrict:'0-9.,',maxChars:20},editAble:true},
					{element_name:"CurrentFYImpact",display_name:"Current FY Impact",itemRenderer:new ClassFactory(CalculateColRender),properties:{columns:calMonth}},
					{element_name:"PreviousFYImpact",display_name:"Previous FY Impact",itemRenderer:null,properties:null},
					{element_name:"ChangeVsLastFY",display_name:"Change vs last FY",itemRenderer:null,properties:null},
					{element_name:"TotalCALLSCurrentQuarter",display_name:"Total CALLS current quarter",itemRenderer:null,properties:null},
					{element_name:"Expenses",display_name:"Expenses",itemRenderer:null,properties:null},
					{element_name:"ModifiedDate",display_name:"Modified Date",itemRenderer:null,properties:null},
			]);
			private var ignoreCurrentFY:Object ={"OriginalCloseDate":true,"Curvetype":true,"Membership":true,"TradingPartner":true,"PreviousFYImpact":true,"ChangeVsLastFY":true,"TotalCALLSCurrentQuarter":true,"Expenses":true,"ModifiedDate":true};
			private var ignoreAllCompact:Object ={"PreviousFYImpact":true,"ChangeVsLastFY":true,"ChangeVsLastFY":true};		
			
			public function showHideColumns():void{
				var columns:Array = gridListAll.columns;
				var type:int = -1;
				if(filter != null){
					type = filter.type;
				}
				for each(var col:AdvancedDataGridColumn in columns){
					var col_name:String = col.dataField;
					var show:Boolean = true;
					if(type == -0 || type == -2){
						if(ignoreCurrentFY[col_name]){
							show = false;
						}
					}else if(type == -3){
						if(ignoreAllCompact[col_name]){
							show = false;
						}
					}
					col.visible = show;
				}
			}
			public function initGridListAllOpportunities():void{				
				var columns:Array = new Array();
				var col:AdvancedDataGridColumn = null;
				
				var type:int = -1;
				if(filter != null){
					type = filter.type;
				}
				col = createColumn("","ButtonRenderer",false);
				var render:ClassFactory = new ClassFactory(ButtonAddRenderer);
				render.properties = new Object();
				render.properties["list"]=list;
				col.itemRenderer = render;
				col.width = 30;
				columns.push(col);
				
				for each(var objCol:Object in all_columns){
					var col_name:String = objCol.element_name;
					if(type == -0 || type == -2){
						if(ignoreCurrentFY[col_name]){
							continue;
						}
					}else if(type == -3){
						if(ignoreAllCompact[col_name]){
							continue;
						}
					}
					var renderer:ClassFactory =objCol.itemRenderer==null?objCol.itemEditor : objCol.itemRenderer;
					var editAble:Boolean = objCol.editAble==null?false:objCol.editAble;
					if(renderer != null && objCol.properties != null){
						var objPro:Object = objCol.properties;
						if(objPro.hasOwnProperty("list")){
							renderer.properties = new Object();
							renderer.properties["list"]= list;
						}else{
							renderer.properties= objCol.properties;
						}
						
					}
					if(objCol.itemEditor != null){
						col = createColumn(objCol.display_name,col_name,editAble,renderer);
					}else{
						col = createColumn(objCol.display_name,col_name,editAble);
						col.itemRenderer = renderer;
					}
					
					
					if(objCol.width != null){
						col.width = objCol.width;
					}
					if(objCol.editorDataField != null){
						col.editorDataField = objCol.editorDataField;
					}
					col.labelFunction = objCol.labelFunction;
					columns.push(col);
				}
				reloadData();
				gridListAll.columns = columns;
				
				/*
				if(rows == null){
					rows = new ArrayCollection();
					rows.addItem(createEmptyObject());
				}else{
					rows.addItemAt(createEmptyObject(),0);
				}
				*/
				//gridListAll.addEventListener(KeyboardEvent.KEY_DOWN,keyEnterHandler);
				
//				rows.addItem({AnnualizedImpact:"Variance"});
				//gridListAll.dataProvider = rows;
			}
			public function reloadData():void{
				rows = Database.opportunityDao.findAll(opp_columns);
				rows.addItem({AnnualizedImpact:"Forecast total",isTotal:true});
				rows.addItem({AnnualizedImpact:"Actual revenue",isTotal:true});
				calculateList(rows);
				
			}
			public static function cloneObject(ob:Object):Object{
				var newObj:Object = new Object();
				for(var key:String in ob){
					newObj[key] = ob[key];
				}
				return newObj;
			}
			
			private function keyEnterHandler(evt:KeyboardEvent):void {
				if(evt.keyCode == Keyboard.ENTER){
					var lst:ArrayCollection = gridListAll.dataProvider as ArrayCollection;
					if(lst == null){
						lst = new ArrayCollection();
						lst.addItem(createEmptyObject());
						gridListAll.dataProvider = lst;
					}else{
						// get first row to check to insert new row
						var obj:Object = lst[0];
						if(obj != null ){//&& !obj.isNew){
							lst.addItemAt(createEmptyObject(),0);
							gridListAll.selectedIndex = 0;
						}
					}
				}
					
				
				
				
			}
			private function calculateItem(item:Object):void{
				var octVal:int = item.Oct; 
				var novVal:int = item.Nov;
				var decVal:int = item.Dec;
				var janVal:int = item.Jan;
				var febVal:int = item.Feb;
				var marVal:int = item.mar;
				var aprVal:int = item.Apr;
				var mayVal:int = item.May;
				var junVal:int = item.Jun;
				var julVal:int = item.Jul;
				var augVal:int = item.Aug;
			}
			private function calculateList(ls:ArrayCollection,isNext:Boolean=false):void{
				var totalForeCast:int = 0;
				var closed:int = 0;
				var notClosed:int = 0;
				var listMapObject:ArrayCollection = new ArrayCollection();
				
				
				if(ls != null){
					for(var i:int=0;i<ls.length;i++){
						var item:Object =ls[i];
						var map:Object = new Object();
						if(item.isTotal) continue;
						var totalFy:int = item.CurrentFYImpact==null?0:item.CurrentFYImpact;
						totalForeCast = totalForeCast + totalFy;
						if(item.SalesStage == SalesStageUtils.getCloseLostValue() || item.SalesStage == SalesStageUtils.getCloseWonValue()){
							closed = closed + total;
						}else{
							notClosed = notClosed + totalFy;
						}
						var relation:Object =Relation.getRelation(Database.customObject7Dao.entity,Database.opportunityDao.entity);;
						if(relation!=null){
							var dataPro:ArrayCollection = GUIUtils.getRelationList(relation, item);
							var isChild:Boolean = false;
							if(dataPro != null && dataPro.length>0){
								var listCo7:ArrayCollection = new ArrayCollection();
								for each(var co7:Object in dataPro){
									var qty:int = parseInt(co7['CustomNumber0']);
									var val:int = parseInt(co7['CustomCurrency4']);
									var total:int =  val * qty;
									item["CustomPickList31"] = co7['CustomPickList31'];
									item["CustomPickList34"] = co7['CustomPickList34'];
									item["CustomNumber0"] = qty;
									item["CustomCurrency4"] = val;
									item["AnnualizedImpact"] = total;
									if(!isChild){
										isChild = true;
									}else{
										var objClone:Object = cloneObject(item);
										objClone["isChild"] = isChild;
										listCo7.addItem(objClone);
										
										//ls.addItemAt(objClone,i);
									}
								}
								if(listCo7.length>0){
									map["index"] = i;
									map["list"] = listCo7;
									listMapObject.addItem(map)
								}
								
								
							}
						}
						
					}			
				}
				// loop map to add co7
				var count:int = 1;
				if(listMapObject.length>0){
					for(var j:int=0;j<listMapObject.length;j++){
						var obj:Object = listMapObject[j];
						var idex:int = parseInt(obj["index"]) + count;
						var list:ArrayCollection = obj["list"] as ArrayCollection;
						for each(var co:Object in list){
							ls.addItemAt(co,idex);
							count++;
						}
						
					}
				}
				calculateGridTotal(closed,notClosed,totalForeCast);
				
			}
			private function calculateGridTotal(closed:int,notClosed:int,curImpact:int):void{
				var lstTotal:ArrayCollection = gridTotal.dataProvider as ArrayCollection;
				if(lstTotal != null && lstTotal.length>0){
					var obj:Object = lstTotal[0];
					obj.Forecast = curImpact;
					var fy:int = obj.FYTarget == null?0:obj.FYTarget;
					obj.variance = fy - curImpact;
					obj.closed = closed
					obj.notclosed = notClosed
					lstTotal.refresh();
				}else{
					var data:ArrayCollection = new ArrayCollection();
					data.addItem({Target:0,Forecast:0,variance:0,closed:0,notclosed:0});
					gridTotal.dataProvider = data;
				}
				
	
			}
		
			private function itemEditEndListener():void{
				//				var grid:AdvancedDataGrid = e.currentTarget as AdvancedDataGrid;
				//				var dataField:String = grid.columns[e.columnIndex].dataField;grid.editedItemRenderer.data
				//				e.preventDefault();
				//				grid.createItemEditor(e.columnIndex,e.rowIndex);
				var tolForeCast:int = 0;//sum(CurrentFYImpact);
				var totalVarian:int = 0;//target - tolForeCast
				var tolClosed:int = 0;// opportunities = status closed
				var tolNotClosed:int = 0;// opportunities = status not closed
				var tolCurrentFYImpact:int = 0;// sum(Oct to Sep)
				//Change vs last FY = CurrentFYImpact - Last FY impact 
				//Total CALLS current quarter = Account -> Call
				//Next FY Impact = sum of all colum month in the last colum.
				calculateList(gridListAll.dataProvider as ArrayCollection);
				
				
			}
			private function itemNextEditEndListener():void{
//				var grid:AdvancedDataGrid = e.currentTarget as AdvancedDataGrid;
//				var dataField:String = grid.columns[e.columnIndex].dataField;grid.editedItemRenderer.data
				//				e.preventDefault();
				//				grid.createItemEditor(e.columnIndex,e.rowIndex);
				var tolForeCast:int = 0;//sum(CurrentFYImpact);
				var totalVarian:int = 0;//target - tolForeCast
				var tolClosed:int = 0;// opportunities = status closed
				var tolNotClosed:int = 0;// opportunities = status not closed
				var tolCurrentFYImpact:int = 0;// sum(Oct to Sep)
				//Change vs last FY = CurrentFYImpact - Last FY impact 
				//Total CALLS current quarter = Account -> Call
				//Next FY Impact = sum of all colum month in the last colum.
				calculateList(gridListAll.dataProvider as ArrayCollection,true);
				
				
			}
			private function getFieldDisplayName(item:Object,col:AdvancedDataGridColumn =null):String{
				if(item == null || col == null) return "";
				var obj:Object = item[col.dataField];
				if(obj != null){
					if(obj.hasOwnProperty("data")){
						return obj["data"];
					}

				}
				return String(obj);
			}
			private function itemEditEndGridTotalListener():void{
				
				var arrLst:ArrayCollection = gridTotal.dataProvider as ArrayCollection;
				var item:Object = arrLst[0];
				item["variance"] = Number(item.FYTarget) - item.Forecast;
				arrLst.refresh();
			}
			private  function initGridTotalAllOpportunities():void{
				
				var columns:Array = new Array();
				//				columns.push(createColumn("","Total"));
				var renderer:ClassFactory = new ClassFactory(ImpactText);
				renderer.properties= {restrict:'0-9.,',maxChars:20};
				columns.push(createColumn("FY 13/14 Target","FYTarget",true,renderer));
				columns.push(createColumn("FY 13/14 Forecast","Forecast",false));
				var col:AdvancedDataGridColumn = createColumn("FY impact variance to target","variance",false);
				col.itemRenderer = new ClassFactory(CalculateGridTotalRender);
				columns.push(col);
				columns.push(createColumn("FY impact, closed opportunities","closed",false));
				columns.push(createColumn("FY impact, not-closed opportunities","notclosed",false));
				gridTotal.columns = columns;
				//var arr:Array = Database.impactCalendarDao.fetch();
				//if(arr != null && arr.length>0){
					//gridTotal.dataProvider = new ArrayCollection(arr);
				//}
				calculateGridTotal(0,0,0);
//				gridTotal.addEventListener(AdvancedDataGridEvent.ITEM_EDIT_END,itemEditEndGridTotalListener);
				
				//				gridTotal.rowCount = data.length;
				
			}
			public function reload():void{
				
			}
		
			private  function initGridProductDetails():void{
				
				var columns:Array = new Array();
				
				columns.push(createColumn("Product Description","ProductDescription",true));
				columns.push(createColumn("# of Patients","Patients",true));
				columns.push(createColumn("Value of Product","ProductValue",true));
				columns.push(createColumn("Value of Patients","QTDRevenue",false));
				
//				gridProductDetails.columns = columns;
				
				var dataProvider:ArrayCollection = new ArrayCollection();
				var objDest:Object = {ProductDescription:"SelfCath",Patients:"200",ProductValue:"700",QTDRevenue:"140000"};
				var objSpeediCath:Object = {ProductDescription:"SpeediCath Straight",Patients:"100",ProductValue:"1400",QTDRevenue:"140000"};
				var objCollection:Object = {ProductDescription:"Collection",Patients:"100",ProductValue:"400",QTDRevenue:"40000"};
				var objTotal:Object = {ProductDescription:"Total",Patients:"400",ProductValue:"2500",QTDRevenue:"320000"};
				dataProvider.addItem(objDest);
				dataProvider.addItem(objSpeediCath);
				dataProvider.addItem(objCollection);
				dataProvider.addItem(objTotal);
//				gridProductDetails.dataProvider = dataProvider;
			}
			private function homeOpportunity():void{
				list.showHomeOpportunity();
			}
			private function filterDataGridResult(item:Object):Boolean {
				if(item == null) return false;
				
				trace("-------------- Opp Name : " + item["OpportunityName"]);
				
				
				var where:String = "";
				var map:Object = new Object();
				if(txtAccountName.text != ""){
					map["AccountName"]=txtAccountName.text;
				}
				if(cboBusinessArea.selectedItem != "" && cboBusinessArea.selectedItem.data != ""){
					map["CustomPickList0"]=cboBusinessArea.selectedItem.data;
				}
				if(txtTerritory.text != ""){
					map["OwnerFullName"]= txtTerritory.text;
				}
				if(cboCategory.selectedItem != null && cboCategory.selectedItem.data != ""){
					map["CustomPickList31"]= cboCategory.text;
				}
				if(cboSalesStage.selectedItem != null && cboSalesStage.selectedItem.data != "" && item["SalesStage"] != null){
					map["SalesStage"]=cboSalesStage.selectedItem.data;
				}
				if(dtCloseDate.selectedDate != null){
					map["CloseDate"]= DateUtils.format(dtCloseDate.selectedDate, DateUtils.DATABASE_DATE_FORMAT);
				}
				
				var found:Boolean = true;
				for(var key:String in map){
					var textCompare:String = map[key];
					/*if("CustomPickList31" == key){
						var listCategory:ArrayCollection = null;
						if( item.hasOwnProperty(SubTableRenderer.RELATION)){
							listCategory = item[SubTableRenderer.RELATION] as ArrayCollection;
						}else{
							var relation:Object =Relation.getRelation(Database.customObject7Dao.entity,Database.opportunityDao.entity);;
							if(relation!=null){
								listCategory = GUIUtils.getRelationList(relation, item);
//								item[SubTableRenderer.RELATION] = listCategory;
							}
							
						}
						
						found = false;
						if(listCategory != null && listCategory.length>0){
							for each(var objCategory:Object in listCategory){
								var data:String = objCategory["CustomPickList31"];
								if(data.toLowerCase().indexOf(textCompare.toLowerCase()) != -1){
									found = true;
									break;
								}
							}
						}
						if(found){
							continue;
						}else{
							break;
						}
						
					}*/
					var value:String = item[key];
					
					if(value != null && value.toLowerCase().indexOf(textCompare.toLowerCase()) != -1){
						found = true;
					}else{
						found = false;
						break;
					}
				}
				return found;

				
				
			}
			
			private function advanceSearch():void{
				
				rows.filterFunction = filterDataGridResult;
				rows.refresh();
				
				
				
			}
			private function save():void{
				Database.begin();
				try
				{
					var lsItem:ArrayCollection = gridListAll.dataProvider as ArrayCollection;
					if(lsItem != null){
						for each(var item:Object in lsItem){
							if(item.isTotal){
								continue;
							}
							var cloneItem:Object = new Object();
							var listField:Array = new Array();
							for each(var objField:Object in opp_columns){
								cloneItem[objField.element_name] = item[objField.element_name];
								listField.push(objField.element_name);
							}
							if(StringUtils.isEmpty(item.gadget_id)){
								Database.opportunityDao.insert(cloneItem);
								var objLast:Object = Database.opportunityDao.selectLastRecord()[0];
								var oidName:String = DAOUtils.getOracleId(Database.opportunityDao.entity);
								item.gadget_id =  objLast.gadget_id;
								cloneItem.gadget_id =  objLast.gadget_id;
								cloneItem.local_update = new Date().getTime();
								cloneItem.deleted = 0;
								item[oidName] = "#" + item.gadget_id;
								cloneItem[oidName] = "#" + item.gadget_id;
								Database.opportunityDao.update(cloneItem);
								item.isNew = false;
							}else{
								Database.opportunityDao.update(cloneItem);
							}
							
						}
						
						var total:ArrayCollection = gridTotal.dataProvider as ArrayCollection;
						if(total != null){
							var objTotal:Object = total[0];
							var newTotal:Object = new Object();
							newTotal.FYTarget = objTotal.newTotal;
							newTotal.gadget_id = objTotal.gadget_id;
							if(StringUtils.isEmpty(newTotal.gadget_id)){
							//	Database.impactCalendarDao.insert(newTotal);
							}else{
								//Database.impactCalendarDao.update(newTotal,{gadget_id:newTotal.gadget_id});
							}
							
						}
						//var newObj:Object = createEmptyObject();
						//lsItem.addItemAt(newObj,0);
						Database.commit();
					}	
				} 
				catch(error:Error) 
				{
					Database.rollback();
				}
				
			}
			
			private function openProductRevenue():void{
				var data:Object = gridTotal.selectedItem;
			}
			protected function clearDate(event:MouseEvent):void
			{
				dtCloseDate.selectedDate = null;
				dtCloseDate.text = "";
				advanceSearch();
			}
			
			private function exportToExcel():void
			{
				//windowedapplication1_creationCompleteHandler(null);
				//var templet:ByteArray =  new xls_templet();
				var xls:ExcelFile = new ExcelFile();
				//xls.loadFromByteArray(templet);
				var sheet:Sheet = new Sheet();
				var cols:Array = gridListAll.columns;
				var list:ArrayCollection = gridListAll.dataProvider as ArrayCollection;
				sheet.resize(list.length+1,cols.length);
				xls.sheets.addItem(sheet);
				//var sheet:Sheet = excelFile.sheets[0];
				var noOfRows:int;
				var noOfColumns:int;
				if(sheet!=null)
				{
					noOfRows=sheet.rows;
					noOfColumns = 3;
					
					
					for(var i:int =1;i<cols.length;i++){
						var colHeader:AdvancedDataGridColumn = cols[i] as AdvancedDataGridColumn;
						var header:String = colHeader.headerText;
						sheet.setCell(row, i-1, header);
					}
					for(var row:int = 0; row<list.length;row++)
					{
						var item:Object = list[row];
						
						for(var j:int =1;j<cols.length;j++){
							var col:AdvancedDataGridColumn = cols[j] as AdvancedDataGridColumn;
							var dataField:String = col.dataField;
							var val:String = item[dataField]==null?"":item[dataField]+"";
							sheet.setCell(row+1, j-1, val);
							//var cell:Cell = sheet.getCell(row+1, j-1);
							
						}
						
					} //for loop ends
					
					//	var exp:ExcelFile = new ExcelFile();
					//	exp.sheets.addItem(sheet);
					//sheet.values.dispatchEvent(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.REFRESH));
					
					var bytes: ByteArray = xls.saveToByteArray();
					//var fr:FileReference = new FileReference();
					//	fr.save(bytes,"SampleExport.xls");
					
					
					var f:File = new File();
					
					f.addEventListener(Event.SELECT, function (event:Event):void{
						var file:File = event.currentTarget as File;
						if(!file.extension) file = File.applicationStorageDirectory.resolvePath(file.nativePath + ".xls"); // Bug #543
						var strStyle:String = "black";
						var showText:String = "SUCCESSFULLY";
						if(file!=null){
							if(file.extension != null && (file.extension.toLowerCase()=="xls" || file.extension.toLowerCase()=="xlsx")){
								var fileStream:FileStream = new FileStream();
								fileStream.open(file, FileMode.WRITE);
								
								
								//var gzEncoder:GZIPEncoder = new GZIPEncoder();
								//var xmlName:String = file.name;
								//	var fzip:FZip = new FZip(file.nativePath);
								//fzip.addFile(xmlName.replace(".zip",".xml"),bytes);
								var ba:ByteArray = new ByteArray(); 
								//fzip.serialize(ba) ;
								ba.position = 0; 
								
								fileStream.writeBytes(bytes);
								fileStream.close();
								/*
								var zipEntry:ZipEntry = new ZipEntry(file.nativePath);
								var zipOUt:ZipOutput = new ZipOutput();
								zipOUt.putNextEntry(zipEntry);
								zipOUt.write(bytes);
								zipOUt.finish();
								zipOUt.closeEntry();
								*/
								//gzEncoder.compressToFile(zipOUt.byteArray,file);
								
							} else {
								
								strStyle = "red";
								showText = 'PREFERENCES_STRING_FILE_NAME_SHOULD_HAVE_XLS_EXTENSION';
							}
							finishExport(showText);
						}
						
					});
					//					f.addEventListener(Event.SELECT, exportFileSelectedHandler);
					f.addEventListener(IOErrorEvent.IO_ERROR, exportErrorHandler);
					f.addEventListener(SecurityErrorEvent.SECURITY_ERROR, exportErrorHandler);
					f.browseForSave("Open Excel File");
				}
				
			}
			private function finishExport(showText:String):void{
				Alert.show(showText,"", Alert.YES, this);
			}
			private function exportErrorHandler(event:ProgressEvent):void
			{
				Alert.show("Error while saving Excel file!");
			}
			
		]]>
	</mx:Script>
		<mx:VBox left="8" right="8" width="100%" height="100%">
			<mx:HBox width="100%" horizontalAlign="right" paddingTop="10" paddingRight="20">
				<mx:LinkButton label="Normal Mode"  click="list.showHomeOpportunity()" icon="{ImageUtils.getImage(Database.opportunityDao.entity)}"/>
				<mx:LinkButton icon="{ImageUtils.excelIcon}" click="exportToExcel()" label="Export Excel" />
				<mx:LinkButton icon="{closeIcon}" label="Cancel"/>
				<mx:LinkButton paddingRight="20" icon="{saveIcon}" click="save()" label="Save"/>
			</mx:HBox>
			<mx:Label paddingTop="20" text="Total of all Opportunities" />
			<mx:AdvancedDataGrid doubleClickEnabled="true" doubleClick="{openProductRevenue()}" height="44" editable="true" width="800" id="gridTotal"/>
			<mx:Label text="List of all Opportunities" />
			<mx:HBox width="100%">
				<mx:VBox>
					<mx:Label text="Account Name"/>
					<mx:TextInput id="txtAccountName" change="advanceSearch()" width="130"/>
				</mx:VBox>
				<mx:VBox>
					<mx:Label text="Business Area"/>
					<mx:ComboBox id="cboBusinessArea" dataProvider="{PicklistService.getPicklist(Database.opportunityDao.entity,'CustomPickList0')}" change="advanceSearch()" width="130"/>
				</mx:VBox> 
				<mx:VBox>
					<mx:Label text="Sales Stage"/>
					<mx:ComboBox dataProvider="{Utils.getSalesStage()}" id="cboSalesStage" change="advanceSearch()" width="130"/>
				</mx:VBox>
				<mx:VBox>
					<mx:Label text="Close Date "/>
					<mx:HBox>
						<mx:DateField id="dtCloseDate" change="advanceSearch()" width="100" formatString="{DateUtils.getCurrentUserDatePattern().dateFormat}"/>
						<mx:LinkButton icon="{ImageUtils.deleteIcon}" height="100%" click="clearDate(event)"/>
					</mx:HBox>
					
				</mx:VBox>
				<mx:VBox>
					<mx:Label text="Category"/>
					<mx:ComboBox id="cboCategory" dataProvider="{PicklistService.getPicklist(Database.customObject7Dao.entity,'CustomPickList31')}" change="advanceSearch()" width="130"/>
				</mx:VBox>
				<mx:VBox>
					<mx:Label text="Territory"/>
					<mx:TextInput id="txtTerritory" change="advanceSearch()" width="130"/>
				</mx:VBox>
			</mx:HBox>
			<mx:Canvas height="100%" id="blockGrid" horizontalScrollPolicy="auto" width="100%" verticalScrollPolicy="off">
				<mx:AdvancedDataGrid height="100%" displayItemsExpanded="true" dataProvider="{rows}" editable="true" variableRowHeight="true" verticalScrollPolicy="auto" id="gridListAll"/>
			</mx:Canvas>
		</mx:VBox>
		
		<!--
		<mx:Label text="Product Details" />
		<mx:AdvancedDataGrid width="600" rowCount="5" editable="true" id="gridProductDetails"/>
		-->
</mx:Canvas>