<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:control="gadget.control.*"
		   creationComplete="canvas1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import gadget.dao.Database;
			import gadget.i18n.i18n;
			import gadget.util.FieldUtils;
			import gadget.util.StringUtils;
			import gadget.window.WindowManager;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Form;
			import mx.containers.FormItem;
			import mx.controls.Label;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			[Bindable] public var item:Object;
			[Bindable] public var rows:ArrayCollection;
			
			
			protected function canvas1_creationCompleteHandler(event:FlexEvent):void
			{
				if(rows==null){
					rows = new ArrayCollection();
				}
				createHeaderForm();
				initColumns();
				//add empty row
				rows.addItem(new Object());
				editableGrid.dataProvider = rows;
				editableGrid.validateNow();
				//ADD ACTION
				editableGrid.addEventListener(KeyboardEvent.KEY_DOWN, function(evt:KeyboardEvent):void {
					if(evt.keyCode == Keyboard.ENTER || evt.keyCode == Keyboard.TAB){
						if(editableGrid.editedItemPosition){
							var editColumn:DataGridColumn = editableGrid.columns[editableGrid.editedItemPosition.columnIndex];
							if( rows.length-1 == editableGrid.editedItemPosition.rowIndex  && editColumn.dataField=='CustomCurrency2' ){
								var newObj:Object = {};
								if(rows==null){
									rows = new ArrayCollection();
								}
								rows.addItem(newObj); //add a blank record
								var index:Number = editableGrid.editedItemPosition.rowIndex+1;
								editableGrid.dataProvider = rows;
								//								editableGrid.selectedIndex = index;
								editableGrid.editedItemPosition = {columnIndex:0, rowIndex:index};
							
							}
						}
					}
				});
				
				
				
			}
			
			protected function initColumns():void{
				var cols:Array = new Array();				
				//itemname
				var itemName:DataGridColumn =createColumn('CustomObject14Name',35);				
				itemName.editorDataField='selectedItem';
				var colRenderer:ClassFactory = new ClassFactory(AutoCompleteColRender);
				colRenderer.properties={											
					'dataProvider':getDataProvider(),
					'updateRelateField':function(item:Object,selectedItem:Object):void{
						if(selectedItem!=null){
							item.CustomObject14ExternalSystemId = selectedItem.ExternalSystemId;
							item.CustomCurrency1 = selectedItem.CustomCurrency0;
							item.CustomObject13Name = selectedItem.CustomObject13Name;
							item.CustomObject13Id = selectedItem.CustomObject13Id;
						}
					},
					'labelFunction':function(item:Object):String{
						return item.Name;
					}};
				itemName.labelFunction = getItemName;				
				itemName.itemEditor = colRenderer;				
				cols.push(itemName);
				
				//item no
				cols.push(createColumn('CustomObject14ExternalSystemId',17,false));
				cols.push(createColumn('IndexedNumber0',10));
				cols.push(createColumn('CustomCurrency1',8,false));
				cols.push(createColumn('CustomCurrency2',9));
				cols.push(createColumn('CustomCurrency0',13,false));
				//deleted column
				var deleteCol:DataGridColumn = createColumn("",7,false);
				var deleteRender:ClassFactory = new ClassFactory(DeleteColRender);
				deleteRender.properties={parentComp:this,addEmptyRow:true};
				deleteCol.itemRenderer=deleteRender;				
				cols.push(deleteCol);
				editableGrid.columns = cols;
			}
			
			
			public static function createColumn(dataField:String,width:Number,editable:Boolean=true):DataGridColumn{
				var col:DataGridColumn = new DataGridColumn();
				col.headerText = FieldUtils.getFieldDisplayName(Database.customObject12Dao.entity,dataField);
				col.dataField = dataField;
				col.editable = editable;
				col.width=width;
				
				return col;
				
			}
			private function getItemName(item:Object, col:DataGridColumn):String {
				if(item == null) return "";
				return item[col.dataField]?item[col.dataField].Name:"";
			}
			
			private function getDataProvider():ArrayCollection {
				
				
				
				var picklist:ArrayCollection = Database.customObject14Dao.findAll(new ArrayCollection([{element_name:"Id,Name,ExternalSystemId,CustomCurrency0,CustomObject13Name,CustomObject13Id"}]),null,null,-1);
				if(picklist!=null){
					picklist.addItemAt({Name:'',Id:'',ExternalSystemId:''},0);
				}
				return picklist;
			}
			
			
			private function getDisplayName(item:Object,entity:String):String{
				return FieldUtils.getFieldDisplayName(entity, item.element_name);				
			}
			
			private function getHeaderField():ArrayCollection{
				return new ArrayCollection([{element_name:'ContactFullName'},
						{element_name:'ContactAccountName'},{element_name:'IndexedDate0'},{element_name:'Phone'/*not found*/},{element_name:'CustomText36'},{element_name:'CustomText33'}]);
			}
			
			private function createHeaderForm():void{
				var form:Form = new Form();
				form.percentWidth =100;
				for each(var field:Object in getHeaderField()){
					var formItem:FormItem = new FormItem();
					formItem.label = field.display_name == null ? getDisplayName(field,Database.customObject11Dao.entity) : field.display_name;
					formItem.percentWidth=100;
					var columnValue:Label = new Label();
					columnValue.setStyle("fontWeight","bold");
					columnValue.percentWidth=100;
					if(item!=null){
						columnValue.text = item[field.element_name];						
					}					
					formItem.addChild(columnValue);
					form.addChild(formItem);
				}				
				headerInfo.addChild(form);
			}
			
			private function openSaveTemplate(e:Event):void{
				var items:ArrayCollection = editableGrid.dataProvider as ArrayCollection; 
				var lstTemplate:ArrayCollection = new ArrayCollection();
				for each(var rec:Object in items){
					var obj:Object = new Object();
					obj.ItemName = rec['CustomObject14Name']?rec['CustomObject14Name'].Name:""
					obj.ItemNo =rec.CustomObject14ExternalSystemId;
					obj.Qty = rec.IndexedNumber0;
					obj.PlantId = rec.CustomObject13Id;
					obj.PlantName = rec.CustomObject13Name;
					lstTemplate.addItem(obj);
				}
				var saveScreent:SaveOrderTemplate = new SaveOrderTemplate();
				saveScreent.items = lstTemplate;
				WindowManager.openModal(saveScreent);
			}
			
			private function openImportTemplate(e:Event):void{
				var importWindow:ImportOrderTemplate = new ImportOrderTemplate();
				WindowManager.openModal(importWindow);
			}
			
			
		]]>
	</fx:Script>
	<mx:VBox left="8" right="8" bottom="8" width="100%" height="100%">	
		<mx:Canvas id="headerInfo" width="100%"/>
		<mx:HBox y="0" x="{width-100}"   id="buttonImportExport" horizontalAlign="right" paddingTop="20" width="100%">
			<mx:LinkButton icon="@Embed(source='/assets/save_config.png')" toolTip="{i18n._('SAVE_ORDER_TEMPLATE@Save as Template')}" click="openSaveTemplate(event)"/>
			<mx:LinkButton icon="@Embed(source='/assets/upload_config.png')" toolTip="{i18n._('IMPORT_TEMPLATE@Import Template')}" click="openImportTemplate(event)" />		
		</mx:HBox>
		<mx:HBox id="hgrid" width="100%" height="100%">
			<mx:DataGrid id="editableGrid" editable="true" sortableColumns="false" width="100%" height="100%"/>
		</mx:HBox>
	</mx:VBox>
	
</mx:Canvas>
