<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" xmlns:control="gadget.control.*"
		   creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import gadget.dao.DAOUtils;
			import gadget.dao.Database;
			import gadget.i18n.i18n;
			import gadget.util.FieldUtils;
			import gadget.util.StringUtils;
			import gadget.window.WindowManager;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Form;
			import mx.containers.FormItem;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.utils.StringUtil;
			[Bindable] public var item:Object;
			[Bindable] public var rows:ArrayCollection;
			public var detailScreen:Detail;
			private var deletedItems:ArrayCollection;
			private var field2Label:Dictionary = new Dictionary();
			protected function init(event:FlexEvent):void
			{
				if(item!=null && StringUtils.isEmpty(item['Id'])){
					if(rows==null){
						rows = new ArrayCollection();
					}
				}else{
					
					rows = new ArrayCollection(Database.customObject12Dao.getByParentId({'CustomObject11Id':item['Id']}));
					
				}
				
				
				
				
				createHeaderForm();
				initColumns();
				//add empty row
				rows.addItem(new Object());
				editableGrid.dataProvider = rows;
				editableGrid.validateNow();
				//ADD ACTION
				editableGrid.addEventListener(KeyboardEvent.KEY_DOWN, function(evt:KeyboardEvent):void {
					if(evt.keyCode == Keyboard.ENTER || evt.keyCode == Keyboard.TAB){
						if(editableGrid.editedItemPosition){
							var editColumn:DataGridColumn = editableGrid.columns[editableGrid.editedItemPosition.columnIndex];
							if( rows.length-1 == editableGrid.editedItemPosition.rowIndex  && editColumn.dataField=='CustomCurrency2' ){
								var newObj:Object = {};
								if(rows==null){
									rows = new ArrayCollection();
								}
								rows.addItem(newObj); //add a blank record
								var index:Number = editableGrid.editedItemPosition.rowIndex+1;
								editableGrid.dataProvider = rows;
								//								editableGrid.selectedIndex = index;
								editableGrid.editedItemPosition = {columnIndex:0, rowIndex:index};
							
							}
						}
					}
				});
				
				
				
			}
			
			public function updateHeaderInfo(obj:Object):void{
				this.item = obj;
				for(var field:String in field2Label){
					var lbl:Label = field2Label[field] as Label;
					lbl.text = item[field];
				}
			}
			
			public function importItems(items:ArrayCollection):void{
				if(items!=null){
					for each(var deleted:Object in editableGrid.dataProvider){
						if(deleted.gadget_id!=null){
							deletedItems.addItem(deleted);
						}
					}
					
					items.addItem({});//add empty row
					rows = items;
					editableGrid.dataProvider = rows;
					editableGrid.validateNow();
				}
			}
			
			protected function initColumns():void{
				var cols:Array = new Array();				
				//itemname
				var itemName:DataGridColumn =createColumn('CustomObject14Name',35);				
				itemName.editorDataField='selectedItem';
				var colRenderer:ClassFactory = new ClassFactory(AutoCompleteColRender);
				colRenderer.properties={											
					'dataProvider':getDataProvider(),
					'updateRelateField':function(item:Object,selectedItem:Object):void{
						if(selectedItem!=null){
							item.CustomObject14ExternalSystemId = selectedItem.ExternalSystemId;
							item.CustomCurrency1 = selectedItem.CustomCurrency0;
							item.CustomObject13Name = selectedItem.CustomObject13Name;
							item.CustomObject13Id = selectedItem.CustomObject13Id;
						}
					},
					'labelFunction':function(item:Object):String{
						return item.Name;
					}};
				itemName.labelFunction = getItemName;				
				itemName.itemEditor = colRenderer;				
				cols.push(itemName);
				
				//item no
				cols.push(createColumn('CustomObject14ExternalSystemId',21,false));
				cols.push(createColumn('IndexedNumber0',10));
				cols.push(createColumn('CustomCurrency1',10,false));
				cols.push(createColumn('CustomCurrency2',10));
				cols.push(createColumn('CustomCurrency0',10,false));
				//deleted column
				var deleteCol:DataGridColumn = createColumn("",4,false);
				var deleteRender:ClassFactory = new ClassFactory(DeleteColRender);
				deleteRender.properties={parentComp:this,addEmptyRow:true};
				deleteCol.itemRenderer=deleteRender;	
				deleteCol.minWidth=3;
				cols.push(deleteCol);
				editableGrid.columns = cols;
			}
			
			
			public static function createColumn(dataField:String,width:Number,editable:Boolean=true):DataGridColumn{
				var col:DataGridColumn = new DataGridColumn();
				col.headerText = FieldUtils.getFieldDisplayName(Database.customObject12Dao.entity,dataField);
				col.dataField = dataField;
				col.editable = editable;
				col.width=width;
				
				return col;
				
			}
			private function getItemName(item:Object, col:DataGridColumn):String {
				if(item == null) return "";
				var obj:Object = item[col.dataField];
				if(obj is String){
					return obj as String;
				}else{
					return item[col.dataField]?item[col.dataField].Name:"";
				}
			}
			
			
			public function save(co11:Object):void{
				
				var dp:ArrayCollection = editableGrid.dataProvider as ArrayCollection;				
			    var missingIndex:int = checkValidator();
				if(missingIndex!=-1){
					Alert.show(i18n._("MISSING_FIELD_MSG@Please input the missing fields."),i18n._('GLOBAL_ERROR@Error'),Alert.OK,this, function(eventObj:CloseEvent):void {
						if (eventObj.detail==Alert.OK) {
							editableGrid.selectedIndex = missingIndex; 
						}
					});	
				}else{
				
						var newDataProvider:ArrayCollection = new ArrayCollection();
						for each(var tmp:Object in dp){
							var t:Object = new Object;
							for(var p:String in tmp){
								if(p=='CustomObject14Name'){
									var itemObj:Object = tmp[p];
									if(itemObj){
										t[p] = itemObj.Name;
										t.CustomObject14Id=itemObj.Id;
									}
								}else{
									t[p] = tmp[p];
								}
								
							}
							newDataProvider.addItem(t);
						}
						newDataProvider.filterFunction = isNotEmptyRow;
						newDataProvider.refresh();
					
					
						Database.begin();
						try{
							if(deletedItems!=null){
								for each(var dObj:Object in deletedItems){
									var oracleId:String=dObj[DAOUtils.getOracleId(Database.customObject12Dao.entity)];
									if(oracleId==null || oracleId.indexOf('#')!=-1){
										Database.customObject12Dao.delete_(dObj);
									}else{
										Database.customObject12Dao.deleteTemporary(dObj);
									}
								}
							}
							var owner:Object = Database.allUsersDao.ownerUser();
							for each(var itemSave:Object in newDataProvider){
								
								var isUpdate:Boolean = itemSave.gadget_id!=null;
								if(!isUpdate){
									//set owner field
									for each(var obj:Object in Database.customObject12Dao.getOwnerFields()){						
										itemSave[obj.entityField] = owner[obj.userField];
									}
									//set-relation to customobject11
									itemSave['CustomObject11Name']=co11['Id'];
									itemSave['CustomObject11Id']=co11['Name']
									Database.customObject12Dao.insert(itemSave);
									itemSave = Database.customObject12Dao.selectLastRecord()[0];
									itemSave['Id']='#'+itemSave.gadget_id;
									Database.customObject12Dao.update(itemSave);
								}else{
									itemSave["deleted"] = false;
									itemSave["error"] = false;
									Database.customObject12Dao.update(itemSave);
								}
								
								
							}
					
						Database.commit();
					}catch(e:SQLError){
						Database.rollback();
					}
				}
				
			}
			
			public function hasError():Boolean{
				var missingIndex:int =  checkValidator();
				
				if(missingIndex!=-1){
					
					editableGrid.selectedIndex = missingIndex;
					
					return true;
				}
				
				return false;
			}
			
			private function isNotEmptyRow(value:Object):Boolean{
				for(var f:String in value){
					if(f!='mx_internal_uid'){
						var fieldV:Object = value[f];
						if(fieldV!=null){
							if(fieldV is String){
								if(!StringUtils.isEmpty(value[f])){
									return true;
								}
							}else{
								if(isNotEmptyRow(fieldV)){
									return true;
								}
							}
							
						}
						
					}
				}
				return false;
			}
			private function checkValidator():int {
				var index:int = -1;
				var isMissing:Boolean = false;
				var lstItems:ArrayCollection = editableGrid.dataProvider as ArrayCollection;
				lstItems.filterFunction = isNotEmptyRow;
				lstItems.refresh();
				
				for each(var item:Object in lstItems){
					
					index++;
					if( checkEmpty(item,"CustomObject14Name") ||
						checkEmpty(item,"IndexedNumber0") ||						
						checkEmpty(item,"CustomCurrency2")
					){
						isMissing = true;						
						break;
					}
				}
				return isMissing ? index : -1;
			}
			
			
			private function checkEmpty(item:Object, fieldName:String):Boolean {
				var obj:Object = item[fieldName];				
				if(obj is String){
					return  StringUtils.isEmpty(item[fieldName]);
				}else{
					return  StringUtils.isEmpty(obj.Name);
				}
				
			}
			
			private function getDataProvider():ArrayCollection {
				
				
				
				var picklist:ArrayCollection = Database.customObject14Dao.findAll(new ArrayCollection([{element_name:"Id,Name,ExternalSystemId,CustomCurrency0,CustomObject13Name,CustomObject13Id"}]),null,null,-1);
				if(picklist!=null){
					picklist.addItemAt({Name:'',Id:'',ExternalSystemId:''},0);
				}
				return picklist;
			}
			
			
			private function getDisplayName(item:Object,entity:String):String{
				return FieldUtils.getFieldDisplayName(entity, item.element_name);				
			}
			
			private function getHeaderField():ArrayCollection{
				return new ArrayCollection([{element_name:'ContactFullName'},
						{element_name:'ContactAccountName'},{element_name:'IndexedDate0'},{element_name:'Phone'/*not found*/},{element_name:'CustomText36'},{element_name:'CustomText33'}]);
			}
			
			private function createHeaderForm():void{
				var form:Form = new Form();
				form.percentWidth =100;
				for each(var field:Object in getHeaderField()){
					var formItem:FormItem = new FormItem();
					formItem.label = field.display_name == null ? getDisplayName(field,Database.customObject11Dao.entity) : field.display_name;
					formItem.percentWidth=100;
					var columnValue:Label = new Label();
					columnValue.setStyle("fontWeight","bold");
					columnValue.percentWidth=100;
					if(item!=null){
						columnValue.text = item[field.element_name];						
					}					
					field2Label[field.element_name] = columnValue;
					formItem.addChild(columnValue);
					form.addChild(formItem);
				}				
				headerInfo.addChild(form);
			}
			
			private function openSaveTemplate(e:Event):void{
				var items:ArrayCollection = editableGrid.dataProvider as ArrayCollection; 
				var lstTemplate:ArrayCollection = new ArrayCollection();
				for each(var rec:Object in items){
					var obj:Object = new Object();
					var name:Object = rec['CustomObject14Name'];
					if(name is String){
						obj.ItemName = name;
					}else{
						if(name!=null){
							obj.ItemName = name.Name;
						}
					}					
					obj.ItemNo =rec.CustomObject14ExternalSystemId;
					obj.Qty = rec.IndexedNumber0;
					obj.PlantId = rec.CustomObject13Id;
					obj.PlantName = rec.CustomObject13Name;
					lstTemplate.addItem(obj);
				}
				var saveScreent:SaveOrderTemplate = new SaveOrderTemplate();
				saveScreent.items = lstTemplate;
				WindowManager.openModal(saveScreent);
			}
			
			private function openImportTemplate(e:Event):void{
				var importWindow:ImportOrderTemplate = new ImportOrderTemplate();
				importWindow.importItems = importItems;
				WindowManager.openModal(importWindow);
			}
			
			
		]]>
	</fx:Script>
	<mx:VBox left="8" right="8" bottom="8" width="100%" height="100%">	
		<mx:Canvas id="headerInfo" width="100%"/>
		<mx:HBox y="0" x="{width-100}"   id="buttonImportExport" horizontalAlign="right" paddingTop="20" width="100%">
			<mx:LinkButton icon="@Embed(source='/assets/save_config.png')" toolTip="{i18n._('SAVE_ORDER_TEMPLATE@Save as Template')}" click="openSaveTemplate(event)"/>
			<mx:LinkButton icon="@Embed(source='/assets/upload_config.png')" toolTip="{i18n._('IMPORT_TEMPLATE@Import Template')}" click="openImportTemplate(event)" />		
		</mx:HBox>
		<mx:HBox id="hgrid" width="100%" height="100%">
			<mx:DataGrid id="editableGrid" editable="true" sortableColumns="false" width="100%"  height="100%"/>
		</mx:HBox>
	</mx:VBox>
	
</mx:Canvas>
